apiVersion: v1
kind: Service
metadata:
  #  annotations:
  #    prometheus.io/port: "9153"
  #    prometheus.io/scrape: "true"
  name: middle-java
spec:
  ports:
    - port: 8002
      protocol: TCP
      targetPort: 8002
  selector:
    th: middle-java
---
apiVersion: v1
data:
  config.json: |
    {
      "Port": 8002,
      "JaegerURL": "http://my-jf-jaeger-collector:14268/api/traces",
      "BottomHost": "bottom",
      "BottomPort": 8003,
      "BottomGRPCPort": 9003
    }
kind: ConfigMap
metadata:
  name: middle-java-config
---
apiVersion: v1
kind: Pod
metadata:
  name: middle-java
  labels:
    th: middle-java
spec:
  containers:
    - image: docker.io/mfenwick100/telemetry-hacking-java:latest
      imagePullPolicy: IfNotPresent
      command: [
        "java",
        "-javaagent:opentelemetry-javaagent.jar",
        "-Dotel.metrics.exporter=none",
        "-Dotel.service.name=middle-java",
        "-Dotel.traces.exporter=jaeger",
        "-Dotel.exporter.jaeger.endpoint=http://my-jf-jaeger-collector:14250/api/traces",
        "-jar", "hacking.jar",
        "bottom"
      ]
      name: middle-java
      ports:
        - containerPort: 8002
          name: http
          protocol: TCP
      resources: {}
      securityContext: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
---
